import java.util.*;

public class report {
    static Point p[];
    static class Point {
        int x,y;
        Point( int x, int y ) {
            this.x = x;
            this.y = y;
        }
    }

    static int Distance( Point p1, Point p2 )
    {
        return (p1.x-p2.x)*(p1.x-p2.x) + (p1.y-p2.y)*(p1.y-p2.y);
    }

    static int bruteForce( int left, int right ) {
        int min = Integer.MAX_VALUE;
        for( int i = left; i < right; i++ ) {
            for( int j = i+1; j <= right; j++ ) {
                int d = Distance( p[i], p[j] );
                if( min > d ) min = d;
            }
        }
        return min;
    }

    static int div( int left, int right ) {

        int size = right - left + 1;
        if( size <= 3 )
            return bruteForce( left, right );

        int mid = ( left + right ) / 2;
        int dleft = div( left, mid );
        int dright = div( mid+1, right );

        int d_min = Math.min( dleft, dright );

        List<Point> s_mid = new ArrayList<>();
        for( int i = left; i <= right; i++ ) {
            int d_x = p[i].x - p[mid].x;
            if( d_x * d_x < d_min )
                s_mid.add( p[i] );
        }

        Collections.sort( s_mid, ( p1,p2 ) -> p1.y - p2.y );
        int Size = s_mid.size();
        for( int i = 0; i < size-1; i++ ) {
            for( int j = i+1; j < size; j++ ) {
                int d_y = s_mid.get(j).y - s_mid.get(i).y;
                if( d_y * d_y < d_min ) {
                    int d = Distance( s_mid.get(i), s_mid.get(j) );
                    if( d_min > d ) d_min = d;
                }
                else break;
            }
        }
        return d_min;
    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        double o=0;
        p = new Point[n];
        for( int i = 0; i < n; i++ )
            p[i] = new Point( sc.nextInt(), sc.nextInt() );

        Arrays.sort( p, ( p1,p2 ) -> p1.x - p2.x );
        o=div( 0, n-1 );
        System.out.println( Math.sqrt(o));
        sc.close();
    }
}